#pyproject.toml

[tool.poetry]
name = "django-enduro-mcb"
version = "0.1.0"
description = ""
authors = ["Heiden <119899341+CarlosHeiden@users.noreply.github.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.13"
django = "^5.2.4"
django-import-export = "^4.3.9"
mysqlclient = "^2.2.7"
weasyprint = "^66.0"
xhtml2pdf = "^0.2.17"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"



#models.py

from django.db import models
from datetime import timedelta


class Categoria(models.Model):
    nome = models.CharField(max_length=100)

    def __str__(self):
        return self.nome


class Piloto(models.Model):
    nome = models.CharField(max_length=100)
    numero_piloto = models.IntegerField(unique=True)
    moto = models.CharField(max_length=100)
    categoria = models.ForeignKey(Categoria, on_delete=models.CASCADE, related_name='pilotos')

    def __str__(self):
        return f'{self.nome} ({self.numero_piloto})'


class RegistrarLargada(models.Model):
    id_volta = models.AutoField(primary_key=True)
    piloto = models.ForeignKey(Piloto, on_delete=models.CASCADE, related_name='largadas')
    horario_largada = models.TimeField(null=True, blank=True)

    def __str__(self):
        return f'Largada: {self.piloto} - {self.horario_largada}'


class RegistrarChegada(models.Model):
    id_volta = models.AutoField(primary_key=True)
    piloto = models.ForeignKey(Piloto, on_delete=models.CASCADE, related_name='chegadas')
    horario_chegada = models.TimeField(null=True, blank=True)

    def __str__(self):
        return f'Chegada: {self.piloto} - {self.horario_chegada}'


class Resultados(models.Model):
    nome = models.CharField(max_length=100)
    numero_piloto = models.IntegerField()
    moto = models.CharField(max_length=100)
    categoria = models.CharField(max_length=100)
    id_volta = models.IntegerField()
    horario_largada = models.TimeField(null=True, blank=True)
    horario_chegada = models.TimeField(null=True, blank=True)
    tempo_volta = models.DurationField(null=True, blank=True)
    tempo_total = models.DurationField(null=True, blank=True)

    def __str__(self):
        return f'{self.nome} ({self.numero_piloto})'

#forms.py

from django import forms
from .models import Piloto, Categoria


class RegistrarLargadaForm(forms.Form):
    numero_piloto = forms.IntegerField(label='Número do Piloto')


class RegistrarChegadaForm(forms.Form):
    numero_piloto = forms.IntegerField(label='Número do Piloto')


class CadastrarPilotoForm(forms.ModelForm):
    categoria = forms.ModelChoiceField(queryset=Categoria.objects.all())

    class Meta:
        model = Piloto
        fields = ['nome', 'numero_piloto', 'moto', 'categoria']

#funcoes.py

from datetime import timedelta


def formatar_timedelta_com_sinal(dif: timedelta) -> str:
    total_ms = int(dif.total_seconds() * 1000)
    sinal = '+' if total_ms > 0 else '-' if total_ms < 0 else ''
    abs_total_ms = abs(total_ms)

    horas = abs_total_ms // 3600000
    minutos = (abs_total_ms % 3600000) // 60000
    segundos = (abs_total_ms % 60000) // 1000
    milissegundos = abs_total_ms % 1000

    return f"{sinal}{horas:02d}:{minutos:02d}:{segundos:02d}.{milissegundos:03d}"



#templetags/format_filters.py

from django import template

register = template.Library()

@register.filter
def format_timedelta_hms_ms(value):
    if not value:
        return ''
    total_seconds = value.total_seconds()
    horas = int(total_seconds // 3600)
    minutos = int((total_seconds % 3600) // 60)
    segundos = int(total_seconds % 60)
    milissegundos = int((total_seconds % 1) * 1000)
    return f"{horas:02d}:{minutos:02d}:{segundos:02d}.{milissegundos:03d}"



#views.py

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.db.models import Q
from datetime import datetime, timedelta, date
from django.http import HttpResponse
from .models import Piloto, RegistrarLargada, RegistrarChegada, Resultados, Categoria
from .forms import RegistrarLargadaForm, RegistrarChegadaForm, CadastrarPilotoForm
from .funcoes import formatar_timedelta_com_sinal


def cadastrar_piloto(request):
    if request.method == 'POST':
        form = CadastrarPilotoForm(request.POST)
        if form.is_valid():
            nome = form.cleaned_data['nome']
            numero_piloto = form.cleaned_data['numero_piloto']
            moto = form.cleaned_data['moto']
            categoria = form.cleaned_data['categoria']

            if Piloto.objects.filter(Q(nome=nome) | Q(numero_piloto=numero_piloto)).exists():
                messages.error(request, 'Já existe um piloto com esse nome ou número.')
            else:
                Piloto.objects.create(
                    nome=nome,
                    numero_piloto=numero_piloto,
                    moto=moto,
                    categoria=categoria
                )
                messages.success(request, 'Piloto cadastrado com sucesso.')
                return redirect('cadastrar_piloto')
    else:
        form = CadastrarPilotoForm()

    return render(request, 'cadastrar_piloto.html', {'form': form})


def registrar_largada(request):
    if request.method == 'POST':
        form = RegistrarLargadaForm(request.POST)
        if form.is_valid():
            numero_piloto = form.cleaned_data['numero_piloto']

            if not numero_piloto:
                messages.error(request, 'Número de piloto é obrigatório.')
                return redirect('registrar_largada')

            try:
                piloto = Piloto.objects.get(numero_piloto=numero_piloto)
            except Piloto.DoesNotExist:
                messages.error(request, 'Piloto não cadastrado.')
                return redirect('registrar_largada')

            agora = datetime.now().strftime('%H:%M:%S.%f')[:-3]

            RegistrarLargada.objects.create(
                piloto=piloto,
                horario_largada=agora
            )

            #messages.success(request, f'Largada registrada para piloto {piloto.numero_piloto}.')
            return redirect('registrar_largada')
    else:
        form = RegistrarLargadaForm()

    return render(request, 'registrar_largada.html', {'form': form})



def registrar_chegada(request):
    if request.method == 'POST':
        form = RegistrarChegadaForm(request.POST)
        if form.is_valid():
            numero_piloto = form.cleaned_data['numero_piloto']
            if not numero_piloto:
                messages.error(request, 'Número de piloto é obrigatório.')
                return redirect('registrar_chegada')

            try:
                piloto = Piloto.objects.get(numero_piloto=numero_piloto)
            except Piloto.DoesNotExist:
                messages.error(request, 'Piloto não cadastrado.')
                return redirect('registrar_chegada')


            agora = datetime.now().strftime('%H:%M:%S.%f')[:-3]

            RegistrarChegada.objects.create(
                piloto=piloto,
                horario_chegada=agora
            )

            save_dados_resultados(agora, piloto)
            return redirect('registrar_chegada')
    else:
        form = RegistrarChegadaForm()

    return render(request, 'registrar_chegada.html', {'form': form})


def save_dados_resultados(agora_str, piloto):
    chegada_time = datetime.strptime(agora_str, '%H:%M:%S.%f').time()

    largada = RegistrarLargada.objects.filter(piloto=piloto).last()
    if not largada or not largada.horario_largada:
        return

    horario_largada = largada.horario_largada

    # Cálculo correto do tempo de volta (real)
    tempo_volta_real = datetime.combine(date.today(), chegada_time) - datetime.combine(date.today(), horario_largada)

    # Soma dos tempos de voltas anteriores
    voltas_anteriores = Resultados.objects.filter(numero_piloto=piloto.numero_piloto).order_by('id_volta')

    tempo_total_final = sum(
        (v.tempo_volta for v in voltas_anteriores),
        timedelta(0)
    )

    # Registro completo da volta atual
    Resultados.objects.create(
        nome=piloto.nome,
        numero_piloto=piloto.numero_piloto,
        moto=piloto.moto,
        categoria=str(piloto.categoria),
        id_volta=largada.id_volta,
        horario_largada=horario_largada,
        horario_chegada=chegada_time,
        tempo_volta=tempo_volta_real,
        tempo_total=tempo_total_final + tempo_volta_real,
    )

from datetime import timedelta

def resultados(request):
    resultados_gerais = []

    for piloto in Piloto.objects.all():
        voltas = Resultados.objects.filter(numero_piloto=piloto.numero_piloto).order_by('id_volta')

        if voltas.count() <= 1:
            continue

        primeira_volta = voltas.first().tempo_volta

        total_pontos = 0
        tempo_real_total = timedelta(0)

        for i, v in enumerate(voltas):
            tempo_real_total += v.tempo_volta

            if i == 0:
                continue  # não calcula pontos para a volta 1

            dif = v.tempo_volta - primeira_volta
            segundos = abs(dif.total_seconds())
            segundos_arredondado = round(segundos)

            if dif.total_seconds() < 0:
                pontos = segundos_arredondado * 3
            elif dif.total_seconds() > 0:
                pontos = segundos_arredondado * 1
            else:
                pontos = 0

            total_pontos += pontos

        resultados_gerais.append({
            'piloto': piloto,
            'numero_piloto': piloto.numero_piloto,
            'pontos_perdidos': total_pontos,
            'tempo_real': tempo_real_total,
        })

    # Ordenar por pontos e depois por tempo real (critério de desempate)
    resultados_gerais.sort(key=lambda x: (x['pontos_perdidos'], x['tempo_real']))

    # Atribuir posição e detectar empates
    for pos, p in enumerate(resultados_gerais, start=1):
        p['position'] = pos

    # Detectar se houve empate em pontos perdidos
    houve_empate = False
    for i in range(1, len(resultados_gerais)):
        if resultados_gerais[i]['pontos_perdidos'] == resultados_gerais[i - 1]['pontos_perdidos']:
            houve_empate = True
            break

    context = {
        'resultados_gerais': resultados_gerais,
        'houve_empate': houve_empate,
    }

    return render(request, 'resultados.html', context)


def resultados_por_categorias(request):
    categorias = Categoria.objects.all()
    resultados_por_categoria = {cat: [] for cat in categorias}

    for categoria in categorias:
        pilotos_categoria = Piloto.objects.filter(categoria=categoria)

        for piloto in pilotos_categoria:
            voltas = Resultados.objects.filter(numero_piloto=piloto.numero_piloto).order_by('id_volta')

            if voltas.count() <= 1:
                continue

            tempo_total = sum(
                v.tempo_volta.total_seconds() for v in voltas[1:]
            )

            tempo_total_str = '{:02d}:{:02d}:{:02d}.{:03d}'.format(
                int(tempo_total // 3600),
                int((tempo_total % 3600) // 60),
                int(tempo_total % 60),
                int((tempo_total % 1) * 1000)
            )

            resultados_por_categoria[categoria].append({
                'nome': piloto.nome,
                'numero_piloto': piloto.numero_piloto,
                'tempo_total': tempo_total_str,
            })

        # ordena e adiciona posição
        resultados_por_categoria[categoria].sort(key=lambda x: x['tempo_total'])
        for pos, p in enumerate(resultados_por_categoria[categoria], start=1):
            p['position'] = pos

    return render(
        request,
        'resultados_por_categorias.html',
        {'resultados_por_categoria': resultados_por_categoria}
    )

from math import ceil

from datetime import timedelta
from django.shortcuts import render
from .models import Piloto, Resultados

def formatar_timedelta_com_sinal(td):
    total_ms = td.total_seconds() * 1000
    sinal = '+' if total_ms > 0 else '-' if total_ms < 0 else ''
    td_abs = abs(td)
    horas = int(td_abs.total_seconds() // 3600)
    minutos = int((td_abs.total_seconds() % 3600) // 60)
    segundos = int(td_abs.total_seconds() % 60)
    milissegundos = int((td_abs.total_seconds() % 1) * 1000)
    return f'{sinal}{horas:02d}:{minutos:02d}:{segundos:02d}.{milissegundos:03d}'

def resultado_piloto(request):
    piloto_detail = []

    for piloto in Piloto.objects.all():
        resultados = Resultados.objects.filter(numero_piloto=piloto.numero_piloto).order_by('id_volta')
        if not resultados.exists():
            continue

        primeira_volta = resultados.first().tempo_volta
        tempo_total_dif_ms = 0
        tempo_real_total = timedelta(0)
        total_pontos = 0
        volta_detail = []

        for res in resultados:
            tempo_volta = res.tempo_volta
            tempo_real_total += tempo_volta

            tempo_volta_str = '{:02d}:{:02d}:{:02d}.{:03d}'.format(
                int(tempo_volta.total_seconds() // 3600),
                int((tempo_volta.total_seconds() % 3600) // 60),
                int(tempo_volta.total_seconds() % 60),
                int((tempo_volta.total_seconds() % 1) * 1000)
            )

            dif = tempo_volta - primeira_volta
            if res != resultados.first():
                tempo_total_dif_ms += int(abs(dif.total_seconds()) * 1000)

            # Diferença formatada com sinal
            dif_volta1_str = formatar_timedelta_com_sinal(dif)

            # Status e Pontos
            status = ''
            pontos = 0
            if res != resultados.first():
                segundos_arredondado = round(abs(dif.total_seconds()))
                if dif.total_seconds() < 0:
                    status = 'adiantado'
                    pontos = segundos_arredondado * 3
                elif dif.total_seconds() > 0:
                    status = 'atrasado'
                    pontos = segundos_arredondado * 1
                total_pontos += pontos

            volta_detail.append({
                'id_volta': res.id_volta,
                'horario_largada': res.horario_largada.strftime('%H:%M:%S.%f')[:-3],
                'horario_chegada': res.horario_chegada.strftime('%H:%M:%S.%f')[:-3],
                'tempo_volta': tempo_volta_str,
                'dif_volta1_str': dif_volta1_str,
                'status': status,
                'pontos': pontos,
            })

        # Tempo total (baseado nas diferenças)
        total_dif = timedelta(milliseconds=tempo_total_dif_ms)
        tempo_total_str = '{:02d}:{:02d}:{:02d}.{:03d}'.format(
            int(total_dif.total_seconds() // 3600),
            int((total_dif.total_seconds() % 3600) // 60),
            int(total_dif.total_seconds() % 60),
            int((total_dif.total_seconds() % 1) * 1000)
        )

        # Tempo real total (critério de desempate)
        tempo_real_str = '{:02d}:{:02d}:{:02d}.{:03d}'.format(
            int(tempo_real_total.total_seconds() // 3600),
            int((tempo_real_total.total_seconds() % 3600) // 60),
            int(tempo_real_total.total_seconds() % 60),
            int((tempo_real_total.total_seconds() % 1) * 1000)
        )

        piloto_detail.append({
            'piloto': piloto,
            'numero_piloto': piloto.numero_piloto,
            'voltas': volta_detail,
            'tempo_total': tempo_total_str,
            'tempo_real': tempo_real_str,
            'total_pontos': total_pontos,
        })

    return render(request, 'resultado_piloto.html', {'piloto_detail': piloto_detail})

def exibir_pilotos(request):
    nome = request.GET.get('nome')
    numero_piloto = request.GET.get('numero_piloto')
    categoria = request.GET.get('categoria')
    if nome and numero_piloto and categoria:
        pilotos = Piloto.objects.filter(
            nome=nome, numero_piloto=numero_piloto, categoria=categoria
        )
    else:
        pilotos = Piloto.objects.all()
    return render(request, 'exibir_pilotos.html', {'pilotos': pilotos})

from django.http import HttpResponse
from django.utils.html import format_html

def debug_tempos(request):
    dados = []

    for resultado in Resultados.objects.all().order_by('numero_piloto', 'id_volta'):
        largada = resultado.horario_largada
        chegada = resultado.horario_chegada
        tempo_volta = resultado.tempo_volta

        def tempo_para_ms(t):
            return t.hour * 3600000 + t.minute * 60000 + t.second * 1000 + int(t.microsecond / 1000)

        if largada and chegada:
            largada_ms = tempo_para_ms(largada)
            chegada_ms = tempo_para_ms(chegada)
            calculado_ms = chegada_ms - largada_ms
        else:
            calculado_ms = None

        salvo_ms = int(tempo_volta.total_seconds() * 1000) if tempo_volta else None
        diferenca = (salvo_ms - calculado_ms) if calculado_ms is not None and salvo_ms is not None else None

        dados.append({
            'piloto': resultado.nome,
            'volta': resultado.id_volta,
            'largada': largada,
            'chegada': chegada,
            'salvo_ms': salvo_ms,
            'calculado_ms': calculado_ms,
            'diferenca': diferenca,
        })

    html = """
    <h2>Debug de Tempos</h2>
    <table border="1" cellpadding="6">
      <tr>
        <th>Piloto</th>
        <th>Volta</th>
        <th>Largada</th>
        <th>Chegada</th>
        <th>Tempo salvo (ms)</th>
        <th>Tempo calculado (ms)</th>
        <th>Diferença (ms)</th>
      </tr>
    """

    for item in dados:
        cor = ''
        if item['diferenca'] is not None and abs(item['diferenca']) > 5:
            cor = ' style="background-color:#fdd"'
        html += f"""
        <tr{cor}>
          <td>{item['piloto']}</td>
          <td>{item['volta']}</td>
          <td>{item['largada']}</td>
          <td>{item['chegada']}</td>
          <td>{item['salvo_ms']}</td>
          <td>{item['calculado_ms']}</td>
          <td>{item['diferenca']}</td>
        </tr>
        """

    html += "</table>"
    return HttpResponse(format_html(html))

from django.http import HttpResponse
from django.utils.html import format_html

def debug_totais(request):
    html = """
    <h2>Debug de Tempo Total</h2>
    <table border="1" cellpadding="6">
        <tr>
            <th>Piloto</th>
            <th>Voltas</th>
            <th>Soma diferenças (ms)</th>
            <th>Tempo real (ms)</th>
            <th>Diferença (ms)</th>
        </tr>
    """

    for piloto in Piloto.objects.all():
        voltas = Resultados.objects.filter(numero_piloto=piloto.numero_piloto).order_by('id_volta')

        if voltas.count() <= 1:
            continue

        tempo_primeira_volta = voltas.first().tempo_volta
        soma_diferencas = sum(abs(v.tempo_volta - tempo_primeira_volta).total_seconds() for v in voltas[1:])
        soma_diferencas_ms = int(soma_diferencas * 1000)

        largada2 = voltas[1].horario_largada
        chegada_final = voltas.last().horario_chegada

        tempo_real = (
            datetime.combine(date.today(), chegada_final) - datetime.combine(date.today(), largada2)
        ).total_seconds()
        tempo_real_ms = int(tempo_real * 1000)

        diferenca = soma_diferencas_ms - tempo_real_ms

        cor = ''
        if abs(diferenca) > 5:
            cor = ' style="background-color:#fdd"'

        html += f"""
        <tr{cor}>
            <td>{piloto.nome}</td>
            <td>{voltas.count()}</td>
            <td>{soma_diferencas_ms}</td>
            <td>{tempo_real_ms}</td>
            <td>{diferenca}</td>
        </tr>
        """

    html += "</table>"
    return HttpResponse(format_html(html))

def resumo_corrida(request):
    resumo = []

    for piloto in Piloto.objects.all():
        resultados = Resultados.objects.filter(numero_piloto=piloto.numero_piloto).order_by('id_volta')
        if not resultados.exists():
            continue

        primeira_volta = resultados.first().tempo_volta
        total_voltas = resultados.count()
        tempo_total_real = timedelta(0)
        total_pontos = 0

        for idx, res in enumerate(resultados):
            tempo_volta = res.tempo_volta
            tempo_total_real += tempo_volta

            if idx == 0:
                continue  # ignora volta 1 para pontuação

            dif = tempo_volta - primeira_volta
            segundos = abs(dif.total_seconds())
            segundos_arredondado = round(segundos)

            if dif.total_seconds() < 0:
                pontos = segundos_arredondado * 3
            elif dif.total_seconds() > 0:
                pontos = segundos_arredondado * 1
            else:
                pontos = 0

            total_pontos += pontos

        resumo.append({
            'nome': piloto.nome,
            'numero': piloto.numero_piloto,
            'categoria': piloto.categoria,
            'voltas': total_voltas,
            'pontos': total_pontos,
            'tempo_real': tempo_total_real,
        })

    return render(request, 'resumo_corrida.html', {'resumo': resumo})

from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, TableStyle, Spacer
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from django.http import FileResponse
from io import BytesIO
from .models import Piloto
from datetime import timedelta

def calcular_pontos_perdidos(diff):
    segundos = round(diff.total_seconds())
    if diff.total_seconds() > 0:
        return segundos  # atraso: 1 ponto por segundo
    else:
        return abs(segundos) * 3  # adiantado: 3 pontos por segundo

def exportar_resultados(request):
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    elementos = []

    elementos.append(Paragraph("Resultados Gerais", styles['Title']))
    elementos.append(Spacer(1, 12))

    dados_tabela = [['#', 'Piloto', 'Categoria', 'Pontos Perdidos', 'Tempo Total Real']]

    pilotos = Piloto.objects.all()

    lista_resultados = []

    for piloto in pilotos:
        voltas = Volta.objects.filter(piloto=piloto).order_by('numero_volta')
        if not voltas.exists():
            continue

        volta_1 = voltas.first()
        total_pontos = 0
        tempo_total_real = timedelta()

        for volta in voltas:
            if volta != volta_1:
                diff = volta.tempo_chegada - volta_1.tempo_chegada
                total_pontos += calcular_pontos_perdidos(diff)

            tempo_volta = volta.tempo_chegada - volta.tempo_largada
            tempo_total_real += tempo_volta

        lista_resultados.append({
            'piloto': piloto,
            'pontos_perdidos': total_pontos,
            'tempo_total_real': tempo_total_real,
        })

    lista_resultados.sort(key=lambda x: x['pontos_perdidos'])

    for idx, item in enumerate(lista_resultados, start=1):
        piloto = item['piloto']
        tempo_formatado = str(item['tempo_total_real']).split('.')[0]  # hh:mm:ss
        dados_tabela.append([
            idx,
            f"{piloto.numero} - {piloto.nome}",
            piloto.categoria.nome,
            item['pontos_perdidos'],
            tempo_formatado
        ])

    tabela = Table(dados_tabela, hAlign='LEFT')
    tabela.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.gray),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 10),
    ]))

    elementos.append(tabela)

    doc.build(elementos)
    buffer.seek(0)
    return FileResponse(buffer, as_attachment=True, filename='resultados_gerais.pdf')

#templates/resultado_piloto.html
{% load static %}
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>Resultados por Piloto</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
</head>
<body class="bg-light">

<div class="container my-4">
    <h1 class="mb-4">Resultados por Piloto</h1>

    {% for piloto in piloto_detail %}
        <div class="card mb-4 shadow-sm">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">
                    Piloto: {{ piloto.piloto.nome }} | Nº: {{ piloto.numero_piloto }} | Categoria: {{ piloto.piloto.categoria }}
                </h5>
            </div>
            <div class="card-body bg-white">
                <table class="table table-striped table-bordered table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Largada</th>
                            <th>Chegada</th>
                            <th>Tempo de Volta</th>
                            <th>Dif. da Volta 1</th>
                            <th>Adiantado/Atrasado</th>
                            <th>Pontos Perdidos</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for v in piloto.voltas %}
                        <tr {% if v.status == 'adiantado' %}class="table-danger"{% endif %}>
                            <td>{{ v.horario_largada }}</td>
                            <td>{{ v.horario_chegada }}</td>
                            <td>{{ v.tempo_volta }}</td>
                            <td>{{ v.dif_volta1_str }}</td>
                            <td>{{ v.status|capfirst }}</td>
                            <td>{{ v.pontos }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>

                <div class="bg-light border rounded p-3 mt-3">
                    <p class="fw-bold mb-1 text-secondary">
                        Total Dif. Volta 01: 
                        <span class="text-dark">{{ piloto.tempo_total }}</span>
                    </p>
                    <p class="fw-bold mb-1 text-secondary">
                        Total Tempo Todas Voltas (Critério de Desempate): 
                        <span class="text-dark">{{ piloto.tempo_real }}</span>
                    </p>
                    <p class="fw-bold mb-0 text-secondary">
                        Total de Pontos Perdidos: 
                        <span class="text-dark">{{ piloto.total_pontos }}</span>
                    </p>
                </div>
            </div>
        </div>
    {% empty %}
        <div class="alert alert-warning">Nenhum resultado disponível no momento.</div>
    {% endfor %}

</div>

</body>
</html>

#templates/resultados.html

{% load static %}
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>Classificação Geral - Enduro</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .trofeu {
            font-size: 1.5rem;
            color: goldenrod;
            margin-right: 0.5rem;
        }
    </style>
</head>
<body class="bg-light">

<div class="container my-5">
    <h1 class="mb-4">
        <span class="trofeu">🏆</span>
        Classificação Geral por Pontos Perdidos
    </h1>

    {% if resultados_gerais %}
    <div class="table-responsive">
        <table class="table table-striped table-bordered table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Posição</th>
                    <th>Nome</th>
                    <th>Número</th>
                    <th>Categoria</th>
                    <th>Pontos Perdidos</th>
                    {% if resultados_gerais|length > 1 and resultados_gerais|dictsort:"pontos_perdidos"|length != resultados_gerais|length %}
                        <th>Critério de Desempate</th>
                    {% endif %}
                </tr>
            </thead>
            <tbody>
                {% for r in resultados_gerais %}
                <tr class="{% if r.position == 1 %}table-warning fw-bold{% endif %}">
                    <td>{{ r.position }}</td>
                    <td>
                        {% if r.position == 1 %}<span class="trofeu">🏆</span>{% endif %}
                        {{ r.piloto.nome }}
                    </td>
                    <td>{{ r.numero_piloto }}</td>
                    <td>{{ r.piloto.categoria }}</td>
                    <td>{{ r.pontos_perdidos }}</td>
                    {% if r.exibir_criterio %}
                        <td>{{ r.criterio_desempate }}</td>
                    {% elif resultados_gerais|length > 1 and r.mesmo_pontuacao %}
                        <td>{{ r.criterio_desempate }}</td>
                    {% endif %}
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    {% else %}
    <div class="alert alert-warning">Nenhum resultado disponível.</div>
    {% endif %}
</div>
    <a href="{% url 'exportar_resultados' %}" class="btn btn-danger my-3">📄 Exportar PDF</a>


</body>
</html>

#urls.py 

from django.urls import path
from . import views


urlpatterns = [
   
    path('cadastrar_piloto/', views.cadastrar_piloto, name='cadastrar_piloto'),
    path(
        'registrar_largada/', views.registrar_largada, name='registrar_largada'
    ),
    path(
        'registrar_chegada/', views.registrar_chegada, name='registrar_chegada'
    ),
    path('resultados/', views.resultados, name='resultados'),
    path('resultado_piloto/',views.resultado_piloto, name='resultado_piloto'),
    path('exibir_pilotos/', views.exibir_pilotos, name='exibir_pilotos'),

    path('debug_totais/', views.debug_totais, name='debug_totais'),
    path('debug_tempos/', views.debug_tempos, name='debug_tempos'),

    path('resumo_corrida/', views.resumo_corrida, name='resumo_corrida'),

    path('exportar_resultados/', views.exportar_resultados, name='exportar_resultados'),


    
]

#admin.py

from django.contrib import admin
from import_export.admin import ExportMixin, ImportExportModelAdmin
from .models import Categoria, Piloto, RegistrarLargada, RegistrarChegada, Resultados


@admin.register(Categoria)
class CategoriaAdmin(ImportExportModelAdmin):
    list_display = ['id', 'nome']
    search_fields = ['nome']


@admin.register(Piloto)
class PilotoAdmin(ImportExportModelAdmin):
    list_display = ['id', 'nome', 'numero_piloto', 'moto', 'categoria']
    search_fields = ['nome', 'numero_piloto']
    list_filter = ['categoria']


@admin.register(RegistrarLargada)
class RegistrarLargadaAdmin(ImportExportModelAdmin):
    list_display = ['id_volta', 'piloto', 'horario_largada']
    search_fields = ['piloto__nome', 'piloto__numero_piloto']


@admin.register(RegistrarChegada)
class RegistrarChegadaAdmin(ImportExportModelAdmin):
    list_display = ['id_volta', 'piloto', 'horario_chegada']
    search_fields = ['piloto__nome', 'piloto__numero_piloto']


@admin.register(Resultados)
class ResultadosAdmin(ImportExportModelAdmin):
    list_display = [
        'id', 'nome', 'numero_piloto', 'moto', 'categoria',
        'id_volta', 'horario_largada', 'horario_chegada',
        'tempo_volta', 'tempo_total'
    ]
    search_fields = ['nome', 'numero_piloto', 'categoria']




