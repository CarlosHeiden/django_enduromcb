#models.py

from django.db import models
from datetime import timedelta


class Categoria(models.Model):
    nome = models.CharField(max_length=100)

    def __str__(self):
        return self.nome


class Piloto(models.Model):
    nome = models.CharField(max_length=100)
    numero_piloto = models.IntegerField(unique=True)
    moto = models.CharField(max_length=100, default='####', blank=True)
    categoria = models.ForeignKey(Categoria, on_delete=models.CASCADE, related_name='pilotos')



class RegistrarLargada(models.Model):
    id_volta = models.AutoField(primary_key=True)
    piloto = models.ForeignKey(Piloto, on_delete=models.CASCADE, related_name='largadas')
    horario_largada = models.TimeField(null=True, blank=True)

    def __str__(self):
        return f'Largada: {self.piloto} - {self.horario_largada}'


class RegistrarChegada(models.Model):
    id_volta = models.AutoField(primary_key=True)
    piloto = models.ForeignKey(Piloto, on_delete=models.CASCADE, related_name='chegadas')
    horario_chegada = models.TimeField(null=True, blank=True)

    def __str__(self):
        return f'Chegada: {self.piloto} - {self.horario_chegada}'


class Resultados(models.Model):
    nome = models.CharField(max_length=100)
    numero_piloto = models.IntegerField()
    moto = models.CharField(max_length=100)
    categoria = models.CharField(max_length=100)
    id_volta = models.IntegerField()
    horario_largada = models.TimeField(null=True, blank=True)
    horario_chegada = models.TimeField(null=True, blank=True)
    tempo_volta = models.DurationField(null=True, blank=True)
    tempo_total = models.DurationField(null=True, blank=True)

    def __str__(self):
        return f'{self.nome} ({self.numero_piloto})'
    

class OrdemLargada(models.Model):
    piloto = models.OneToOneField(
        Piloto,
        on_delete=models.CASCADE,
        related_name='ordem_largada',
        verbose_name="Piloto"
    )
    posicao = models.IntegerField(unique=True, verbose_name="Posi√ß√£o de Largada")

    class Meta:
        ordering = ['posicao']
        verbose_name = "Ordem de Largada"
        verbose_name_plural = "Ordens de Largada"

    def __str__(self):
        return f"Posi√ß√£o {self.posicao} - {self.piloto.numero_piloto} - {self.piloto.nome}" 

# resultado_piloto.html

{% load static %}
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <style>
    /* Corrige contraste no cabe√ßalho da tabela */
    thead.table-dark th {
        background-color: #343a40 !important;
        color: white !important;
    }

    /* Garante que o fundo da tabela n√£o interfira */
    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        border: 1px solid #dee2e6;
        padding: 8px;
        text-align: center;
    }

    @media print {
        .no-print {
            display: none !important;
        }
    }
</style>

    <meta charset="UTF-8">
    <meta http-equiv="refresh" content="60">
    <title>Resultados por Piloto</title>
    
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
</head>
<body class="bg-light">

<div class="container my-4">
    <h1 class="mb-4">Resultados por Piloto</h1>

    {% for piloto in piloto_detail %}
        <div class="card mb-4 shadow-sm">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">
                    Piloto: {{ piloto.piloto.nome }} | N¬∫: {{ piloto.numero_piloto }} | Categoria: {{ piloto.piloto.categoria }}
                </h5>
            </div>
            <div class="card-body bg-white">
                <table class="table table-striped table-bordered table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Largada</th>
                            <th>Chegada</th>
                            <th>Tempo de Volta</th>
                            <th>Dif. da Volta 1</th>
                            <th>Adiantado/Atrasado</th>
                            <th>Pontos Perdidos</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for v in piloto.voltas %}
                        <tr {% if v.status == 'adiantado' %}class="table-danger"{% endif %}>
                            <td>{{ v.horario_largada }}</td>
                            <td>{{ v.horario_chegada }}</td>
                            <td>{{ v.tempo_volta }}</td>
                            <td>{{ v.dif_volta1_str }}</td>
                            <td>{{ v.status|capfirst }}</td>
                            <td>{{ v.pontos }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>

                <div class="bg-light border rounded p-3 mt-3">
                    <p class="fw-bold mb-1 text-secondary">
                        Total Dif. Volta 01: 
                        <span class="text-dark">{{ piloto.tempo_total }}</span>
                    </p>
                    <p class="fw-bold mb-1 text-secondary">
                        Total Tempo Todas Voltas (Crit√©rio de Desempate): 
                        <span class="text-dark">{{ piloto.tempo_real }}</span>
                    </p>
                    <p class="fw-bold mb-0 text-secondary">
                        Total de Pontos Perdidos: 
                        <span class="text-dark">{{ piloto.total_pontos }}</span>
                    </p>
                </div>
            </div>
        </div>
    {% empty %}
        <div class="alert alert-warning">Nenhum resultado dispon√≠vel no momento.</div>
    {% endfor %}

</div>
<div class="container text-center my-4">
    <a href="{% url 'exportar_resultado_piloto' %}" class="btn btn-danger no-print">
        üìÑ Exportar PDF por Piloto
    </a>
</div>

</body>
</html>
